package ph.com.medilink.maxiflexmobileapp.Fragments;

import android.Manifest;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.view.GestureDetectorCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import org.ksoap2.serialization.SoapObject;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;

import ph.com.medilink.maxiflexmobileapp.Activities.MainActivity;
import ph.com.medilink.maxiflexmobileapp.Globals.GlobalFunctions;
import ph.com.medilink.maxiflexmobileapp.Globals.GlobalVariables;
import ph.com.medilink.maxiflexmobileapp.PlainOldJavaObjects.LOGClass;
import ph.com.medilink.maxiflexmobileapp.R;
import ph.com.medilink.maxiflexmobileapp.Utilities.LOARecyclerViewAdapter;
import ph.com.medilink.maxiflexmobileapp.Utilities.PackageInstalledReceiver;
import ph.com.medilink.maxiflexmobileapp.WebServices.WebServiceClass;

/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link Fragment_LetterOfAuthorization.OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link Fragment_LetterOfAuthorization#newInstance} factory method to
 * create an instance of this fragment.
 */
public class Fragment_LetterOfAuthorization extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private DrawerLayout dl_letterGuarantee;
    private RecyclerView rvLetterOfGuarantee;
    private LinearLayout lvDownloadProgress;
    private TextView tvEmptyLOG;
    private Button lvClearAll;
    private EditText et_search_name, et_search_logNumber, et_search_dateFrom, et_search_dateTo;

    private ArrayList<LOGClass> LOGlist;
    private OnFragmentInteractionListener mListener;
    private LOARecyclerViewAdapter mRecyclerViewAdapter;

    private PackageInstalledReceiver mInstalledReceiver;
    private IntentFilter appInstalledFilter;

    /*********************************
     * GENERATED BY ANDROID STUDIO
     ****************************************/
    public Fragment_LetterOfAuthorization() {

    }

    // TODO: Rename and change types and number of parameters
    public static Fragment_LetterOfAuthorization newInstance(String param1, String param2) {
        Fragment_LetterOfAuthorization fragment = new Fragment_LetterOfAuthorization();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p/>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        void onFragmentInteraction(Uri uri);
    }

    /***************************************************************************************************************************/

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
        if (savedInstanceState != null) {
            LOGlist = (ArrayList<LOGClass>) savedInstanceState.getSerializable("LOG_list");
            if (LOGlist == null) {
                LOGlist = new ArrayList<LOGClass>();
            }
        } else {
            LOGlist = new ArrayList<LOGClass>();
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_letter_of_guarantee, container, false);
        //drawerlayout
        dl_letterGuarantee = (DrawerLayout) rootView.findViewById(R.id.dl_letterGuarantee);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(getActivity(), dl_letterGuarantee, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {
            @Override
            public void onDrawerSlide(View drawerView, float slideOffset) {
                InputMethodManager inputMethodManager = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                assert getActivity().getCurrentFocus() != null;
                inputMethodManager.hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(), 0);
                super.onDrawerSlide(drawerView, slideOffset);
            }
        };
        dl_letterGuarantee.setDrawerListener(toggle);
        toggle.syncState();
        // loading screen
        lvDownloadProgress = (LinearLayout) rootView.findViewById(R.id.lvDownloadProgress);
        //empty log indicator
        tvEmptyLOG = (TextView) rootView.findViewById(R.id.tvEmptyLOG);
        //recyclerview
        rvLetterOfGuarantee = (RecyclerView) rootView.findViewById(R.id.rvLetterOfGuarantee);
        rvLetterOfGuarantee.setLayoutManager(new LinearLayoutManager(getContext()));
        rvLetterOfGuarantee.addOnItemTouchListener(new RecyclerTouchListener(getContext(), rvLetterOfGuarantee));
        if (LOGlist.size() > 0) {
            mRecyclerViewAdapter = new LOARecyclerViewAdapter(LOGlist, getContext(), dl_letterGuarantee);
            rvLetterOfGuarantee.setAdapter(mRecyclerViewAdapter);
            rvLetterOfGuarantee.setVisibility(View.VISIBLE);
            lvDownloadProgress.setVisibility(View.GONE);
        } else {
//           .execute("5000000696");
            new SearchLogList().execute(GlobalVariables.MAIN_MEMBER_ID);
        }
//        rvLetterOfGuarantee.addOnScrollListener(new RecyclerView.OnScrollListener(){
//            @Override
//            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
//                int topRowVerticalPosition = (recyclerView == null || recyclerView.getChildCount() == 0) ? 0 : recyclerView.getChildAt(0).getTop();
//                if(topRowVerticalPosition>=0){
//                    new SearchLogList().execute(GlobalVariables.MAIN_MEMBER_ID);
//                }
//            }
//
//            @Override
//            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
//                super.onScrollStateChanged(recyclerView, newState);
//            }
//        });
        et_search_name = (EditText) rootView.findViewById(R.id.et_search_name);
        et_search_logNumber = (EditText) rootView.findViewById(R.id.et_search_logNumber);
        et_search_dateTo = (EditText) rootView.findViewById(R.id.et_search_dateTo);
        et_search_dateFrom = (EditText) rootView.findViewById(R.id.et_search_dateFrom);
        et_search_dateFrom.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar myCalendar = Calendar.getInstance();
                DatePickerDialog.OnDateSetListener date = new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                        myCalendar.set(Calendar.YEAR, year);
                        myCalendar.set(Calendar.MONTH, monthOfYear);
                        myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                        et_search_dateFrom.setText(sdf.format(myCalendar.getTime()));
                    }
                };
                new DatePickerDialog(getActivity(), date, myCalendar.get(Calendar.YEAR),
                        myCalendar.get(Calendar.MONTH), myCalendar.get(Calendar.DAY_OF_MONTH)).show();
            }
        });
        et_search_dateTo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar myCalendar = Calendar.getInstance();
                DatePickerDialog.OnDateSetListener date = new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                        myCalendar.set(Calendar.YEAR, year);
                        myCalendar.set(Calendar.MONTH, monthOfYear);
                        myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                        et_search_dateTo.setText(sdf.format(myCalendar.getTime()));
                    }
                };
                new DatePickerDialog(getActivity(), date, myCalendar.get(Calendar.YEAR),
                        myCalendar.get(Calendar.MONTH), myCalendar.get(Calendar.DAY_OF_MONTH)).show();
            }
        });
        lvClearAll = (Button) rootView.findViewById(R.id.lvClearAll);
        lvClearAll.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                et_search_name.setText("");
                et_search_logNumber.setText("");
                et_search_dateTo.setText("");
                et_search_dateFrom.setText("");
            }
        });
        setHasOptionsMenu(true);

        return rootView;
    }

    @Override
    public void onStart() {
        if (GlobalVariables.InstallReceiverRegistered) {
            getContext().registerReceiver(mInstalledReceiver, appInstalledFilter);
        }
        super.onStart();
    }

    @Override
    public void onStop() {
        dl_letterGuarantee.closeDrawer(GravityCompat.END);
        super.onStop();
    }

    @Override
    public void onDestroy() {
        if (GlobalVariables.InstallReceiverRegistered) {
            getContext().unregisterReceiver(mInstalledReceiver);
        }
        super.onDestroy();
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        menu.clear();
        inflater.inflate(R.menu.menu_letter_guarantee, menu);
        super.onCreateOptionsMenu(menu, inflater);
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        switch (id) {
            case R.id.action_refresh:
                if (new GlobalFunctions().checkInternetState(getContext())) {
                    new SearchLogList().execute(GlobalVariables.MAIN_MEMBER_ID);
                }else {
                    new GlobalFunctions().showAlertMessage(getContext(), getResources().getString(R.string.enable_internet));
                }
                return true;
            case R.id.action_signOut:
                ((MainActivity) (Activity) getContext()).SignOut();
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        if (LOGlist.size() > 0) {
            outState.putSerializable("LOG_list", LOGlist);
        }
        super.onSaveInstanceState(outState);
    }

    public void hideSearchDrawer() {
        if (dl_letterGuarantee.isDrawerOpen(GravityCompat.END))
            dl_letterGuarantee.closeDrawer(GravityCompat.END);
    }

    public boolean isSearchDrawerOpened() {
        return dl_letterGuarantee.isDrawerOpen(GravityCompat.END);
    }

    public void openPDFAttempt(final File file) {
        Uri path = Uri.fromFile(file);
        Intent openPdfIntent = new Intent(Intent.ACTION_VIEW);
        openPdfIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        openPdfIntent.setDataAndType(path, "application/pdf");
        try {
            final PackageManager packageManager = getContext().getPackageManager();
            //if there is no pdf reader apps installed on device, search the play store
            if (openPdfIntent.resolveActivity(packageManager) == null) {
                Dialog.OnClickListener downloadPDFReaderButton = new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        //register receiver that checks if pdf reader is installed
                        mInstalledReceiver = new PackageInstalledReceiver(getContext(), file, "application/pdf");
                        appInstalledFilter = new IntentFilter();
                        appInstalledFilter.addAction(Intent.ACTION_PACKAGE_ADDED);
                        appInstalledFilter.addAction(Intent.ACTION_PACKAGE_INSTALL);
                        appInstalledFilter.addDataScheme("package");
                        getContext().registerReceiver(mInstalledReceiver, appInstalledFilter);
                        GlobalVariables.InstallReceiverRegistered = true;
                        //launch google play intent
                        Uri marketUri = Uri.parse("market://search?q=PDF");
                        Intent marketIntent = new Intent(Intent.ACTION_VIEW).setData(marketUri);
                        //if google play store app is available, launch the app, else, launch the browser
                        if (marketIntent.resolveActivity(packageManager) == null) {
                            marketUri = Uri.parse("https://play.google.com/store/apps/search?q=PDF");
                            marketIntent = new Intent(Intent.ACTION_VIEW).setData(marketUri);
                            // if no browsers installed, show snackbar of file path
                            if (marketIntent.resolveActivity(packageManager) == null) {
                                //unregisterReceiver()
                                getContext().unregisterReceiver(mInstalledReceiver);
                                GlobalVariables.InstallReceiverRegistered = false;
                                Snackbar snackbar = Snackbar.make(dl_letterGuarantee, getResources().getString(R.string.fragment_download_saved) + file.getPath(), Snackbar.LENGTH_INDEFINITE);
                                snackbar.show();
                            } else {
                                getContext().startActivity(marketIntent);
                            }
                        } else {
                            getContext().startActivity(marketIntent);
                        }
                    }
                };
                new GlobalFunctions().showAlertMessage(getContext(), getResources().getString(R.string.fragment_download_view_unable), downloadPDFReaderButton);
            } else {
                // open pdf
                getContext().startActivity(openPdfIntent);
            }
        } catch (ActivityNotFoundException e) {
            Snackbar snackbar = Snackbar.make(dl_letterGuarantee, getResources().getString(R.string.fragment_download_saved) + file.getPath(), Snackbar.LENGTH_INDEFINITE);
            snackbar.show();
        }
    }

    /**
     * Item CLick Listener for recyclerview
     */
    private class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {

        private GestureDetectorCompat gestureDetectorCompat;

        public RecyclerTouchListener(Context context, final RecyclerView recyclerView) {
            gestureDetectorCompat = new GestureDetectorCompat(context, new GestureDetector.SimpleOnGestureListener() {

                @Override
                public void onLongPress(MotionEvent e) {

                }

                @Override
                public boolean onSingleTapConfirmed(MotionEvent e) {
                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());
                    int itemSelected = recyclerView.getChildAdapterPosition(child);
                    if (itemSelected > -1) {
                        if (mRecyclerViewAdapter.getItem(itemSelected).isSaved()) {
                            if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
                                File[] pdfs = new File(GlobalVariables.MAXIFLEX_FOLDER).listFiles();
                                for (File f : pdfs) {
                                    if (f.getName().endsWith(".pdf") && f.getName().substring(f.getName().indexOf("_") + 1, f.getName().indexOf(".")).equals(mRecyclerViewAdapter.getItem(itemSelected).getLOGNo().trim())) {
                                        openPDFAttempt(f);
                                        break;
                                    }
                                }
                            } else {
                                ActivityCompat.requestPermissions((AppCompatActivity) getContext(), new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, GlobalVariables.REQUEST_EXTERNAL_READ_WRITE);
                            }
                        } else if (new GlobalFunctions().checkInternetState(getContext()))
                            new DownloadLOG().execute(mRecyclerViewAdapter.getItem(itemSelected));
                        else
                            new GlobalFunctions().showAlertMessage(getContext(), getResources().getString(R.string.enable_internet));
                    }
                    return false;
                }
            });
        }

        @Override
        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {
            gestureDetectorCompat.onTouchEvent(e);
            return false;
        }

        @Override
        public void onTouchEvent(RecyclerView rv, MotionEvent e) {
        }

        @Override
        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {

        }
    }

    /**
     * ASYNCTASKS
     **/
    private class SearchLogList extends AsyncTask<String, LOGClass, Void> {

        ArrayList<LOGClass> logClassArrayList;


        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            lvDownloadProgress.setVisibility(View.VISIBLE);
            tvEmptyLOG.setVisibility(View.GONE);
            GlobalFunctions.lockOrientation(getActivity());
        }

        @Override
        protected Void doInBackground(String... params) {

            logClassArrayList = new ArrayList<>();
            try {
                SoapObject soapArrayString = new WebServiceClass().SearchLOGList_eCard(params[0]);
                File dontiaDirectory = new File(GlobalVariables.MAXIFLEX_FOLDER);
                File[] pdfs = dontiaDirectory.listFiles();
                if (soapArrayString != null && !soapArrayString.toString().toUpperCase().contains("NO RECORD FOUND")) {
                    int stringArrayCount = soapArrayString.getPropertyCount();
                    for (int i = 0; i < stringArrayCount; i++) {
                        LOGClass logClass = new LOGClass();
                        String[] attributes = soapArrayString.getPropertyAsString(i).split("\\|", -1);
                        int count = 0;
                        while (count < attributes.length) {
                            switch (count) {
                                case 0:
                                    if (!attributes[count].trim().equalsIgnoreCase("anyType{}"))
                                        logClass.setIssueDate(attributes[count].trim());
                                    break;
                                case 1:
                                    logClass.setRequestNo(attributes[count].trim());
                                    break;
                                case 2:
                                    if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
                                        for (int f = 0; f < pdfs.length; f++) {
                                            if (pdfs[f].getName().endsWith(".pdf") && pdfs[f].getName().substring(pdfs[f].getName().indexOf("_") + 1, pdfs[f].getName().indexOf(".")).equals(attributes[count].trim())) {
                                                logClass.setIsSaved(true);
                                            }
                                        }
                                    }
                                    logClass.setLOGNo(attributes[count].trim());
                                    break;
                                case 3:
                                    logClass.setMemberName(attributes[count].trim());
                                    break;
                                case 4:
                                    logClass.setClinicName(attributes[count].trim());
                                    break;
                                case 5:
                                    logClass.setDentistName(attributes[count].trim());
                                    break;
                                case 6:
                                    logClass.setAvailmentDate(attributes[count].trim());
                                    break;
                                case 7:
                                    logClass.setClaimStatusName(attributes[count].trim());
                                    break;
                                case 8:
                                    logClass.setMemberID(attributes[count].trim());
                                    break;
                                case 9:
                                    logClass.setIsRead(attributes[count].trim());
                                    break;
                            }
                            count++;
                        }
                        publishProgress(logClass);

                    }
                    if (!(new GlobalFunctions().checkInternetState(getContext())) && logClassArrayList.size() > 0) {
                        for (LOGClass logClass : logClassArrayList) {
                            if (!logClass.isSaved()) {
                                logClassArrayList.remove(logClass);
                            }
                        }
                    }
                }
            } catch (Exception e) {
                return null;
            }
            return null;
        }

        @Override
        protected void onProgressUpdate(LOGClass... values) {
            logClassArrayList.add(values[0]);
        }

        @Override
        protected void onPostExecute(Void logClasses) {
            LOGlist = logClassArrayList;
            lvDownloadProgress.setVisibility(View.GONE);
            GlobalFunctions.unlockOrientation(getActivity());
            if (LOGlist.size() > 0) {
                mRecyclerViewAdapter = new LOARecyclerViewAdapter(LOGlist, getContext(), dl_letterGuarantee);
                rvLetterOfGuarantee.setAdapter(mRecyclerViewAdapter);
                rvLetterOfGuarantee.setVisibility(View.VISIBLE);
                tvEmptyLOG.setVisibility(View.GONE);
            } else if (LOGlist.size() == 0 && GlobalVariables.ERROR_MESSAGE.contains("Exception")||GlobalVariables.ERROR_MESSAGE.contains("Error:")) {
                new GlobalFunctions().showAlertMessage(getContext(), GlobalVariables.ERROR_MESSAGE);
                rvLetterOfGuarantee.setVisibility(View.GONE);
                tvEmptyLOG.setVisibility(View.GONE);
            } else {
                rvLetterOfGuarantee.setVisibility(View.GONE);
                tvEmptyLOG.setVisibility(View.VISIBLE);
            }
        }
    }

    private class DownloadLOG extends AsyncTask<LOGClass, Void, String> {
        ProgressDialog progressDialog;
        LOGClass lg;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressDialog = new GlobalFunctions().showProgressDialog(getContext(), getResources().getString(R.string.fragment_download_log), new DialogInterface.OnDismissListener() {
                @Override
                public void onDismiss(DialogInterface dialog) {
                    DownloadLOG.this.cancel(true);
                }
            });
            GlobalFunctions.lockOrientation(getActivity());
        }

        @Override
        protected String doInBackground(LOGClass... params) {
            String result = "Error";
            try {
                lg = params[0];
                result = new WebServiceClass().byteLOApdf((AppCompatActivity) getContext(), params[0].getLOGNo(), GlobalVariables.USER_ID);
                if (result.contains("Exception")||result.contains("Error:")) {
                    return result;
                }
            } catch (Exception ex) {
                result = "Exception: " + ex.getMessage();
            }
            return result;
        }

        @Override
        protected void onCancelled() {
            progressDialog.dismiss();
        }

        @Override
        protected void onPostExecute(final String s) {
            super.onPostExecute(s);
            progressDialog.dismiss();
            GlobalFunctions.unlockOrientation(getActivity());
            if (s.contains("Exception")) {
                Toast.makeText(getContext(), "Exception: " + s, Toast.LENGTH_LONG).show();
            } else if (s.contains("Error:")) {
                Toast.makeText(getContext(), s, Toast.LENGTH_LONG).show();
            }  else if (s.equalsIgnoreCase("Error"))
                Toast.makeText(getContext(), getContext().getResources().getString(R.string.fragment_download_error_file), Toast.LENGTH_LONG).show();
            else {
                if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
//                    File[] pdfs = new File(GlobalVariables.MAXIFLEX_FOLDER).listFiles();
//                    for (File f : pdfs) {
//                        if (f.getName().endsWith(".pdf") && f.getName().substring(f.getName().indexOf("_") + 1, f.getName().indexOf(".")).equals(lg.getLOGNo().trim())) {
                    lg.setIsSaved(true);
                    mRecyclerViewAdapter.notifyItemChanged(mRecyclerViewAdapter.getPosition(lg));
                    openPDFAttempt(new File(s));
//                            break;
//                        }
//                    }
                } else {
                    ActivityCompat.requestPermissions((AppCompatActivity) getContext(), new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, GlobalVariables.REQUEST_EXTERNAL_READ_WRITE);
                }
            }
        }
    }


}
